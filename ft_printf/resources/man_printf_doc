man7.org > Linux > man-pages
	
       #include <stdio.h>

       int printf(const char *format, ...);


DESCRIPTION

       The functions in the printf() family produce output according to a
       format as described below.  The functions printf() and vprintf()
       write output to stdout, the standard output stream.

       All of these functions write the output under the control of a format
       string that specifies how subsequent arguments (or arguments accessed
       via the variable-length argument facilities of stdarg(3)) are
       converted for output.

   Format of the format string
       The format string is a character string, beginning and ending in its
       initial shift state, if any.  The format string is composed of zero
       or more directives: ordinary characters (not %), which are copied
       unchanged to the output stream; and conversion specifications, each
       of which results in fetching zero or more subsequent arguments.  Each
       conversion specification is introduced by the character %, and ends
       with a conversion specifier.  In between there may be (in this order)
       zero or more flags, an optional minimum field width, an optional
       precision and an optional length modifier.

       The arguments must correspond properly (after type promotion) with
       the conversion specifier.  By default, the arguments are used in the
       order given, where each '*' (see Field width and Precision below) and
       each conversion specifier asks for the next argument (and it is an
       error if insufficiently many arguments are given).  One can also
       specify explicitly which argument is taken, at each place where an
       argument is required, by writing "%m$" instead of '%' and "*m$"
       instead of '*', where the decimal integer m denotes the position in
       the argument list of the desired argument, indexed starting from 1.
       Thus,

           printf("%*d", width, num);

       and

           printf("%2$*1$d", width, num);

       are equivalent.  The second style allows repeated references to the
       same argument.  The C99 standard does not include the style using
       '$', which comes from the Single UNIX Specification.  If the style
       using '$' is used, it must be used throughout for all conversions
       taking an argument and all width and precision arguments, but it may
       be mixed with "%%" formats, which do not consume an argument.  There
       may be no gaps in the numbers of arguments specified using '$'; for
       example, if arguments 1 and 3 are specified, argument 2 must also be
       specified somewhere in the format string.

       For some numeric conversions a radix character ("decimal point") or
       thousands' grouping character is used.  The actual character used
       depends on the LC_NUMERIC part of the locale.  (See setlocale(3).)
       The POSIX locale uses '.' as radix character, and does not have a
       grouping character.  Thus,

               printf("%'.2f", 1234567.89);

       results in "1234567.89" in the POSIX locale, in "1234567,89" in the
       nl_NL locale, and in "1.234.567,89" in the da_DK locale.



RETURN VALUE

       Upon successful return, these functions return the number of
       characters printed (excluding the null byte used to end output to
       strings).

       If an output error is encountered, a negative value is returned.




===================================================

   Conversion specifiers
       A character that specifies the type of conversion to be applied.  The
       conversion specifiers and their meanings are:

       c      (character)
              the int argument is converted to
                     an unsigned char, and the resulting character is written.


       s      (string)
              the const char * argument is
                     expected to be a pointer to an array of character type
                     (pointer to a string).  Characters from the array are written
                     up to (but not including) a terminating null byte ('\0'); if a
                     precision is specified, no more than the number specified are
                     written.  
              If a precision is given, no null byte need be
                     present; if the precision is not specified, or is greater than
                     the size of the array, the array must contain a terminating
                     null byte.


       p      (pointer address)
              The void * pointer argument is printed in hexadecimal (as if
                     by %#x or %#lx).


       d, i   (decimal / integer)
              The int argument is converted to signed decimal notation.  
              The precision, if any, gives the min number of digits that
                     must appear; if the output requires fewer digits, it's 
                     padded on the left with zeros.  Default precision is 1.
                     When 0 is printed with an explicit precision 0, the output is
                     empty.


       o, u, x, X
              The unsigned int argument is converted to unsigned octal (o),
                     unsigned decimal (u), or unsigned hexadecimal (x and X) nota‐
                     tion.  
              The letters abcdef are used for x conversions; the let‐
                     ters ABCDEF are used for X conversions.  
              The precision, if
                     any, gives the min number of digits that must appear; if
                     the output requires fewer digits, it is padded on the
                     left with zeros.  Default precision is 1.  When 0 is
                     printed with an explicit precision 0, the output is empty.


       f      (float)
              The double argument is rounded and converted to decimal nota‐
                     tion in the style [-]ddd.ddd, where the number of digits after
                     the decimal-point character is equal to the precision specifi‐
                     cation.  If precision is missing, it is 6; if the
                     precision is zero, no decimal-point character
                     appears.  If a decimal point appears, at least one digit
                     appears before it.


       %      A '%' is written.  No argument is converted.  The complete
                     conversion specification is '%%'.


   Length modifier
       Here, "integer conversion" stands for d, i, o, u, x, or X conversion.

       hh     A following integer conversion corresponds to a signed char or
              unsigned char argument, or a following n conversion corre‐
              sponds to a pointer to a signed char argument.

       h      A following integer conversion corresponds to a short int or
              unsigned short int argument, or a following n conversion cor‐
              responds to a pointer to a short int argument.

       l      (ell) A following integer conversion corresponds to a long int
              or unsigned long int argument, or a following n conversion
              corresponds to a pointer to a long int argument, or a follow‐
              ing c conversion corresponds to a wint_t argument, or a fol‐
              lowing s conversion corresponds to a pointer to wchar_t argu‐
              ment.

       ll     (ell-ell).  A following integer conversion corresponds to a
              long long int or u_int64_t int argument, or a follow‐
              ing n conversion corresponds to a pointer to a long long int
              argument.

   Field width
       An optional decimal digit string (with nonzero first digit) specify‐
       ing a minimum field width.  If the converted value has fewer charac‐
       ters than the field width, it will be padded with spaces on the left
       (or right, if the left-adjustment flag has been given).  Instead of a
       decimal digit string one may write "*" or "*m$" (for some decimal
       integer m) to specify that the field width is given in the next argu‐
       ment, or in the m-th argument, respectively, which must be of type
       int.  A negative field width is taken as a '-' flag followed by a
       positive field width.  In no case does a nonexistent or small field
       width cause truncation of a field; if the result of a conversion is
       wider than the field width, the field is expanded to contain the con‐
       version result.

   Precision
       An optional precision, in the form of a period ('.')  followed by an
       optional decimal digit string.  Instead of a decimal digit string one
       may write "*" or "*m$" (for some decimal integer m) to specify that
       the precision is given in the next argument, or in the m-th argument,
       respectively, which must be of type int.  If the precision is given
       as just '.', the precision is taken to be zero.  A negative precision
       is taken as if the precision were omitted.  This gives the minimum
       number of digits to appear for d, i, o, u, x, and X conversions, the
       number of digits to appear after the radix character for a, A, e, E,
       f, and F conversions, the maximum number of significant digits for g
       and G conversions, or the maximum number of characters to be printed
       from a string for s and S conversions.

   Flag characters
       The character % is followed by zero or more of the following flags:

       #      The value should be converted to an "alternate form".  For o
              conversions, the first character of the output string is made
              zero (by prefixing a 0 if it was not zero already).  For x and
              X conversions, a nonzero result has the string "0x" (or "0X"
              for X conversions) prepended to it.  For a, A, e, E, f, F, g,
              and G conversions, the result will always contain a decimal
              point, even if no digits follow it (normally, a decimal point
              appears in the results of those conversions only if a digit
              follows).  For g and G conversions, trailing zeros are not
              removed from the result as they would otherwise be.  For other
              conversions, the result is undefined.

       0      The value should be zero padded.  For d, i, o, u, x, X, a, A,
              e, E, f, F, g, and G conversions, the converted value is
              padded on the left with zeros rather than blanks.  If the 0
              and - flags both appear, the 0 flag is ignored.  If a preci‐
              sion is given with a numeric conversion (d, i, o, u, x, and
              X), the 0 flag is ignored.  For other conversions, the behav‐
              ior is undefined.

       -      The converted value is to be left adjusted on the field bound‐
              ary.  (The default is right justification.)  The converted
              value is padded on the right with blanks, rather than on the
              left with blanks or zeros.  A - overrides a 0 if both are
              given.

       ' '    (a space) A blank should be left before a positive number (or
              empty string) produced by a signed conversion.

       +      A sign (+ or -) should always be placed before a number pro‐
              duced by a signed conversion.  By default, a sign is used only
              for negative numbers.  A + overrides a space if both are used.
       


===================================================

%[flags][width][precision][length][specifier]

precision:
if (strlen(var) < precision)
       spaces = var - precision;
if (L_FLAG === format_string)
       


Each conversion specification is introduced by the character %. After the %, 
the following appear in sequence:

— Zero or more flags (in any order) that modify the meaning of the conversion 
specification.

— An optional minimum field width. If the converted value has fewer characters than 
the field width, it is padded with spaces (by default) on the left (or right, if the 
left adjustment flag, described later, has been given) to the field width. The field 
width takes the form of an asterisk * (described later) or a nonnegative decimal 
integer.279)

— An optional precision that gives the minimum number of digits to appear for the 
d, i, o, u, x, and X conversions, the number of digits to appear after the 
decimal-point character for a, A, e, E, f, and F conversions, the maximum number of 
significant digits for the g and G conversions, or the maximum number of bytes to be
 written for s conversions. The precision takes the form of a period (.) followed 
 either by an asterisk * (described later) or by an optional decimal integer; if only 
 the period is specified, the precision is taken as zero. If a precision appears with
  any other conversion specifier, the behavior is undefined.

— An optional length modifier that specifies the size of the argument.

— A conversion specifier character that specifies the type of conversion to be applied.



